var documenterSearchIndex = {"docs":
[{"location":"api/#General-remarks","page":"Electrolyte models","title":"General remarks","text":"","category":"section"},{"location":"api/","page":"Electrolyte models","title":"Electrolyte models","text":"All physical quantities are assumed to be consistently represented through their values expressed in basic SI units (m, kg, s, A, K, mol, cd), supported by the LessUnitful.jl package built on top of Unitful.jl.","category":"page"},{"location":"api/#Electrolyte-data","page":"Electrolyte models","title":"Electrolyte data","text":"","category":"section"},{"location":"api/","page":"Electrolyte models","title":"Electrolyte models","text":"AbstractElectrolyteData\nElectrolyteData","category":"page"},{"location":"api/#LiquidElectrolytes.AbstractElectrolyteData","page":"Electrolyte models","title":"LiquidElectrolytes.AbstractElectrolyteData","text":"abstract type AbstractElectrolyteData\n\nAbstract super type for electrolytes\n\n\n\n\n\n","category":"type"},{"location":"api/#LiquidElectrolytes.ElectrolyteData","page":"Electrolyte models","title":"LiquidElectrolytes.ElectrolyteData","text":"mutable struct ElectrolyteData <: AbstractElectrolyteData\n\nData for electrolyte. It is defined using Base.@kwdef has keyword constructors like\n\n    ElectrolyteData(nc=3,z=[-1,2,1])\n\nnc::Int64: Number of ionic species.\nna::Int64: Number of surface species\niϕ::Int64: Potential index in species list.\nip::Int64: Pressure index in species list\nD::Vector{Float64}: Mobility coefficient\nz::Vector{Int64}: Charge numbers of ions\nM0::Float64: Molar weight of solvent\nM::Vector{Float64}: Molar weight of ions\nv0::Float64: Molar volume of solvent\nv::Vector{Float64}: Molar volumes of ions\nκ::Vector{Float64}: Solvation numbers\nc_bulk::Vector{Float64}: Bulk ion concentrations\nϕ_bulk::Float64: Bulk voltage\np_bulk::Float64: Bulk pressure\nΓ_bulk::Int64: Bulk boundary number\nϕ_we::Float64: Working electrode voltage\nΓ_we::Int64: Working electrode  boundary number\nT::Float64: Temperature\nRT::Float64: Molar gas constant scaled with temperature\nF::Float64: Faraday constant\nε::Float64: Dielectric permittivity of solvent\nε_0::Float64: Dielectric permittivity of vacuum\npscale::Float64: Pressure scaling factor\neneutral::Bool: Local electroneutrality switch\nscheme::Symbol: Flux caculation scheme This allows to choose between\n:μex (default): excess chemical potential (SEDAN) scheme, see sflux\n:act : scheme based on reciprocal activity coefficients, see aflux\n:cent : central scheme, see cflux.\n\nepsreg::Float64: Regularization parameter used in rlog\n\nweights::Vector{Float64}: Species weights for norms in solver control.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"Electrolyte models","title":"Electrolyte models","text":"The default values for electrolyte data are those of an symmetric 0.1M aqueous binary electrolyte at  298.5K with solvation number κ=10, ion molar volumes similar to water molecules and diffusion coefficient 2.0e-9 m^2s. All values given in SI base units.","category":"page"},{"location":"api/","page":"Electrolyte models","title":"Electrolyte models","text":"using LiquidElectrolytes\nElectrolyteData()","category":"page"},{"location":"api/","page":"Electrolyte models","title":"Electrolyte models","text":"dlcap0(::ElectrolyteData)\ndebyelength(::ElectrolyteData)\nchemical_potential\nchemical_potentials!\nc0_barc\nrrate\niselectroneutral\nisincompressible","category":"page"},{"location":"api/#LiquidElectrolytes.dlcap0-Tuple{ElectrolyteData}","page":"Electrolyte models","title":"LiquidElectrolytes.dlcap0","text":"dlcap0(electrolyte)\n\nDouble layer capacitance at zero voltage for symmetric binary electrolyte.\n\nExample\n\nusing LessUnitful\nely = ElectrolyteData(c_bulk=fill(0.01ufac\"mol/dm^3\",2))\nround(dlcap0(ely),sigdigits=5) |> u\"μF/cm^2\"\n# output\n\n22.847 μF cm^-2\n\n\n\n\n\n","category":"method"},{"location":"api/#LiquidElectrolytes.debyelength-Tuple{ElectrolyteData}","page":"Electrolyte models","title":"LiquidElectrolytes.debyelength","text":"debyelength(electrolyte)\n\nDebye length.\n\nusing LessUnitful\nely = ElectrolyteData(c_bulk=fill(0.01ufac\"mol/dm^3\",2))\nround(debyelength(ely),sigdigits=5) |> u\"nm\"\n# output\n\n4.3018 nm\n\n\n\n\n\n","category":"method"},{"location":"api/#LiquidElectrolytes.chemical_potential","page":"Electrolyte models","title":"LiquidElectrolytes.chemical_potential","text":"    chemical_potential(c, barc, p, v, electrolye)\n\nCalculate chemical potential of species with concentration c\n\n        μ = v(p-p_ref) + RTlog fraccbar c\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.chemical_potentials!","page":"Electrolyte models","title":"LiquidElectrolytes.chemical_potentials!","text":"chemical_potentials!(μ,u,electrolyte)\n\nCalculate chemical potentials from concentrations.\n\nInput:\n\nμ: memory for result (will be filled)\nu: local solution vector (concentrations, potential, pressure)\n\nReturns μ0, μ: chemical potential of solvent and chemical potentials of ions.\n\nusing LessUnitful\nely = ElectrolyteData(c_bulk=fill(0.01ufac\"mol/dm^3\",2))\nμ0,μ=chemical_potentials!([0.0,0.0],vcat(ely.c_bulk,[0,0]),ely)\nround(μ0,sigdigits=5),round.(μ,sigdigits=5)\n# output\n\n(-0.89834, [-21359.0, -21359.0])\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.c0_barc","page":"Electrolyte models","title":"LiquidElectrolytes.c0_barc","text":"c0_barc(u,electrolyte)\n\nCalculate solvent concentration c_0 and summary concentration bar c from vector of concentrations c using the incompressibility constraint (assuming κ_0=0):\n\n sum_i=0^N c_i (v_i + κ_iv_0) =1\n\nThis gives\n\n c_0v_0=1-sum_i=1^N c_i (v_i+ κ_iv_0)\n\nc_0= 1v_0 - sum_i=1^N c_i(fracv_iv_0+κ_i)\n\nThen we can calculate \n\n bar c= sum_i=0^N c_i\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.rrate","page":"Electrolyte models","title":"LiquidElectrolytes.rrate","text":"rrate(R0,β,A)\n\nReaction rate expression\n\nrrate(R0,β,A)=R0*(exp(-β*A) - exp((1-β)*A))\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.iselectroneutral","page":"Electrolyte models","title":"LiquidElectrolytes.iselectroneutral","text":"iselectroneutral(cx::Vector,celldata)\n\nCheck for electroneutrality of concentration vector\n\n\n\n\n\niselectroneutral(tsol::TransientSolution,celldata)\n\nCheck for electorneutrality of transient solution\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.isincompressible","page":"Electrolyte models","title":"LiquidElectrolytes.isincompressible","text":"isincompressible(cx::Vector,celldata)\n\nCheck for incompressibility of concentration vector\n\n\n\n\n\nisincompressible(tsol::TransientSolution,celldata)\n\nCheck for incompressibility of transient solution\n\n\n\n\n\n","category":"function"},{"location":"api/#Poisson-Boltzmann-system","page":"Electrolyte models","title":"Poisson-Boltzmann system","text":"","category":"section"},{"location":"api/","page":"Electrolyte models","title":"Electrolyte models","text":"PBSystem","category":"page"},{"location":"api/#LiquidElectrolytes.PBSystem","page":"Electrolyte models","title":"LiquidElectrolytes.PBSystem","text":"PBSystem(grid;\n         celldata=ElectrolyteData(),\n         bcondition=default_bcondition,\n         kwargs...)\n\nCreate VoronoiFVM system generalized Poisson-Boltzmann. Input:\n\ngrid: discretization grid\ncelldata: composite struct containing electrolyte data\nbcondition: boundary condition\nkwargs: Keyword arguments of VoronoiFVM.System\n\n\n\n\n\n","category":"function"},{"location":"api/#Poisson-Nernst-Planck-system","page":"Electrolyte models","title":"Poisson-Nernst-Planck system","text":"","category":"section"},{"location":"api/","page":"Electrolyte models","title":"Electrolyte models","text":"PNPSystem\npnpunknowns\nelectrolytedata\nsolventconcentration","category":"page"},{"location":"api/#LiquidElectrolytes.PNPSystem","page":"Electrolyte models","title":"LiquidElectrolytes.PNPSystem","text":"PNPSystem(grid;\n         celldata=ElectrolyteData(),\n         bcondition=default_bcondition,\n         kwargs...)\n\nCreate VoronoiFVM system for generalized Poisson-Nernst-Planck. Input:\n\ngrid: discretization grid\ncelldata: composite struct containing electrolyte data\nbcondition: boundary condition\nreaction : reactions of the bulk species\nkwargs: Keyword arguments of VoronoiFVM.System\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.pnpunknowns","page":"Electrolyte models","title":"LiquidElectrolytes.pnpunknowns","text":"pnpunknowns(sys)\n\nReturn vector of unknowns initialized with bulk data.\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.electrolytedata","page":"Electrolyte models","title":"LiquidElectrolytes.electrolytedata","text":"electrolytedata(sys)\n\nExtract electrolyte data from system.\n\n\n\n\n\n","category":"function"},{"location":"api/#LiquidElectrolytes.solventconcentration","page":"Electrolyte models","title":"LiquidElectrolytes.solventconcentration","text":"   solventconcentration(U::Array, electrolyte)\n\nCalculate vector of solvent concentrations from solution array.\n\n\n\n\n\n","category":"function"},{"location":"changes/#Changes","page":"Changes","title":"Changes","text":"","category":"section"},{"location":"changes/#Pre-Registration-(versions-0.1.0)","page":"Changes","title":"Pre-Registration (versions <0.1.0)","text":"","category":"section"},{"location":"changes/#v0.0.23-BREAKING-July-11,-2023","page":"Changes","title":"v0.0.23  BREAKING July 11, 2023","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Breaking: \nFixed PNP discretization: for consistency with equilibrium we need to use  bar c nabla fracc_ibar c dots instead of nabla c dots. \nivsweep  and dlcapsweep  now have their own return types. These can be amended by more information without breaking codes\nivsweep  and dlcapsweep  have now a store_solutions keyword argument (false by default) which indicates if all solutions should be stored.\nIntroduced Poisson-Boltzmann solver\nSurface species example (thanks @smaasz!)\nChecked consistency with equilibrium for all variants (equilibrium, pb, pnp)","category":"page"},{"location":"changes/#v0.0.22-BREAKING-June-28,-2023","page":"Changes","title":"v0.0.22  BREAKING June 28, 2023","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Update return values in ivsweep ","category":"page"},{"location":"changes/#v0.0.21-BREAKING-June-26,-2023","page":"Changes","title":"v0.0.21  BREAKING June 26, 2023","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"More general return values in ivsweep ","category":"page"},{"location":"std/#Standard-calculations","page":"Standard calculations","title":"Standard calculations","text":"","category":"section"},{"location":"std/","page":"Standard calculations","title":"Standard calculations","text":"bulkbcondition\nAbstractSimulationResult\nvoltages_solutions","category":"page"},{"location":"std/#LiquidElectrolytes.bulkbcondition","page":"Standard calculations","title":"LiquidElectrolytes.bulkbcondition","text":"bulkbcondition(f,u,bnode,electrolyte)\n\nBulk boundary condition for electrolyte: set potential, pressure and concentrations to bulk values.\n\n\n\n\n\n","category":"function"},{"location":"std/#LiquidElectrolytes.AbstractSimulationResult","page":"Standard calculations","title":"LiquidElectrolytes.AbstractSimulationResult","text":"abstract type AbstractSimulationResult\n\nAbstract simulation result.\n\n\n\n\n\n","category":"type"},{"location":"std/#LiquidElectrolytes.voltages_solutions","page":"Standard calculations","title":"LiquidElectrolytes.voltages_solutions","text":"voltages_solutions(result)\n\nReturn a TransientSolution tsol containing voltages (in tsol.t) and the corresponding stationary solutions (in tsol.u).\n\n\n\n\n\n","category":"function"},{"location":"std/#Double-layer-capacitance","page":"Standard calculations","title":"Double layer capacitance","text":"","category":"section"},{"location":"std/","page":"Standard calculations","title":"Standard calculations","text":"dlcapsweep\nDLCapSweepResult \nvoltages_dlcaps","category":"page"},{"location":"std/#LiquidElectrolytes.dlcapsweep","page":"Standard calculations","title":"LiquidElectrolytes.dlcapsweep","text":"       dlcapsweep(sys;voltages=(-1:0.1:1)*ufac\"V\",\n                              δ=1.0e-4,\n                              molarity=0.1*ufac\"mol/dm^3\",\n                              store_solutions=false,\n                              solver_kwargs...)\n\nCalculate double layer capacitances for voltages given in voltages. Returns a DLCapSweepResult\n\nAssumptions:\n\nOnly one double layer in the system - close to working electrode\n1D domain\n\n\n\n\n\n","category":"function"},{"location":"std/#LiquidElectrolytes.DLCapSweepResult","page":"Standard calculations","title":"LiquidElectrolytes.DLCapSweepResult","text":"struct DLCapSweepResult{Tv, Tc, Ts} <: AbstractSimulationResult\n\nResult data type for dlcapsweep\n\nvoltages::Any: Vector of voltages\n\ndlcaps::Any: Vector of double layer capacitances\n\nsolutions::Any: Vector of solutions\n\n\n\n\n\n","category":"type"},{"location":"std/#LiquidElectrolytes.voltages_dlcaps","page":"Standard calculations","title":"LiquidElectrolytes.voltages_dlcaps","text":"voltages_dlcaps(result)\n\nDouble layer capacitance curve as DiffEqArray\n\n\n\n\n\n","category":"function"},{"location":"std/#Voltage-current-sweeps","page":"Standard calculations","title":"Voltage-current sweeps","text":"","category":"section"},{"location":"std/","page":"Standard calculations","title":"Standard calculations","text":"ivsweep\nIVSweepResult\nvoltages_currents\ncurrents","category":"page"},{"location":"std/#LiquidElectrolytes.ivsweep","page":"Standard calculations","title":"LiquidElectrolytes.ivsweep","text":" ivsweep(\n      sys;\n      voltages = (-0.5:0.1:0.5) * ufac\"V\",\n      store_solutions = false,\n      solver_kwargs...,\n      )\n\nCalculate molar reaction rates and bulk flux rates for each voltage in voltages.\n\n\n\n\n\n","category":"function"},{"location":"std/#LiquidElectrolytes.IVSweepResult","page":"Standard calculations","title":"LiquidElectrolytes.IVSweepResult","text":"struct IVSweepResult{Tv, Twe, Tbulk, Ts} <: AbstractSimulationResult\n\nResult data type for ivsweep\n\nvoltages::Any: Vector of voltages\n\nj_we::Any: Working electrode molar reaction rates\n\nj_bulk::Any: Bulk molar fluxes\n\nsolutions::Any: Vector of solutions\n\n\n\n\n\n","category":"type"},{"location":"std/#LiquidElectrolytes.voltages_currents","page":"Standard calculations","title":"LiquidElectrolytes.voltages_currents","text":"voltages_currents(result,ispec)\n\nVoltage- working electrode current curve for species as DiffEqArray\n\n\n\n\n\n","category":"function"},{"location":"std/#LiquidElectrolytes.currents","page":"Standard calculations","title":"LiquidElectrolytes.currents","text":"currents(result,ispec)\n\nWorking electrode current  for species ispec.\n\n\n\n\n\n","category":"function"},{"location":"examples/Example111_SurfaceKinetics/","page":"Suface kinetics","title":"Suface kinetics","text":"EditURL = \"https://github.com/j-fu/LiquidElectrolytes.jl/blob/main/examples/Example111_SurfaceKinetics.jl\"","category":"page"},{"location":"examples/Example111_SurfaceKinetics/#Suface-kinetics","page":"Suface kinetics","title":"Suface kinetics","text":"","category":"section"},{"location":"examples/Example111_SurfaceKinetics/","page":"Suface kinetics","title":"Suface kinetics","text":"(source code)","category":"page"},{"location":"examples/Example111_SurfaceKinetics/","page":"Suface kinetics","title":"Suface kinetics","text":"module Example111_SurfaceKinetics\nusing LessUnitful\nusing ExtendableGrids, GridVisualize\nusing VoronoiFVM\nusing LiquidElectrolytes\nusing Colors\nusing StaticArrays\nusing InteractiveUtils\nusing ForwardDiff\n\n\nfunction main(;\n    nref = 0,\n    voltages = (-3.0:0.1:3.0) * ufac\"V\",\n    molarities = [0.001, 0.01, 0.1, 1],\n    scheme = :μex,\n    κ = 10.0,\n    Plotter = nothing,\n    new = false,\n    kwargs...,\n)\n\n    @local_phconstants N_A e R ε_0 k_B\n    F = N_A * e\n    c_0 = 2.99792458e8\n    @local_unitfactors cm μF mol dm s mA A nm bar eV μA\n\n\n\n    defaults = (;\n        max_round = 3,\n        tol_round = 1.0e-9,\n        verbose = \"e\",\n        reltol = 1.0e-8,\n        tol_mono = 1.0e-10,\n    )\n\n    kwargs = merge(defaults, kwargs)\n\n    hmin = 1.0e-1 * ufac\"μm\" * 2.0^(-nref)\n    hmax = 1.0 * ufac\"μm\" * 2.0^(-nref)\n    L = 80.0 * ufac\"μm\"\n    X = geomspace(0, L, hmin, hmax)\n    grid = simplexgrid(X)\n\n    T = 273.15 + 25 * ufac\"K\"\n\n\n    # kinetic model\n    # A+_aq <-> A+_ads,\t                    ##1\n    # A+_ads + e- <-> A_ads,                ##2\n    # A_ads <-> A_aq                        ##3\n\n\n    bulk_species = [\"A+_aq\", \"A_aq\"]\n    surface_species = [\"A+_ads\", \"A_ads\"]\n\n    C_gap = 20 * ufac\"μF/cm^2\"\n    ϕ_pzc = 0.2 * ufac\"V\"\n\n    iaplus = 1\n    ibminus = 2\n    ia = 3\n    iaplus_ads = 4\n    ia_ads = 5\n\n\n    function halfcellbc(\n        f,\n        u::VoronoiFVM.BNodeUnknowns{Tval,Tv,Tc,Tp,Ti},\n        bnode,\n        data,\n    ) where {Tval,Tv,Tc,Tp,Ti}\n        (; nc, na, Γ_we, Γ_bulk, ϕ_we, ip, iϕ, v, v0, T, RT, ε) = data\n\n        bulkbcondition(f, u, bnode, data; region = Γ_bulk)\n\n\n        if bnode.region == Γ_we\n\n            # boundary_dirichlet!(f,u,bnode;species=iϕ,region=Γ_we,value=ϕ_we)\n\n            # Robin b.c. for the Poisson equation\n\n            boundary_robin!(f, u, bnode, iϕ, C_gap / ε, C_gap * (ϕ_we - ϕ_pzc) / ε)\n\n            # surface current density\n            sigma = C_gap * (ϕ_we - u[iϕ] - ϕ_pzc)\n\n            kf = zeros(Tval, 3)\n            kr = zeros(Tval, 3)\n\n            # A+_aq <-> A+_ads,\t                    ##1\n            ΔG_ads_aplus = 1.0 * eV + 1.0e+1 * sigma * eV\n\n            kf[1] = 1.0e13 * exp(-max(ΔG_ads_aplus, 0.0) / (k_B * T))\n            kr[1] = 1.0e13 * exp(-max(-ΔG_ads_aplus, 0.0) / (k_B * T))\n\n            # A+_ads + e- <-> A_ads,                ##2\n            ΔG_rxn = 1.0 * eV + 1.5e+1 * sigma * eV\n\n            kf[2] = 1.0e13 * exp(-max(ΔG_rxn, 0.0) / (k_B * T))\n            kr[2] = 1.0e13 * exp(-max(-ΔG_rxn, 0.0) / (k_B * T))\n\n            # A_ads <-> A_aq                        ##3\n            ΔG_ads_a = 0.5 * eV + 0.5e+1 * sigma * eV\n\n            kf[3] = 1.0e13 * exp(-max(ΔG_ads_a, 0.0) / (k_B * T))\n            kr[3] = 1.0e13 * exp(-max(-ΔG_ads_a, 0.0) / (k_B * T))\n\n            S = 1.0e-6 / N_A * (1.0e10)^2 * ufac\"mol/m^2\"\n            θ_free = 1 - u[iaplus_ads] - u[ia_ads]\n\n            rates = zeros(Tval, 3)\n\n            rates[1] = kf[1] * u[iaplus] * θ_free - kr[1] * u[iaplus_ads]\n            rates[2] = kf[2] * u[iaplus_ads] - kr[2] * u[ia_ads]\n            rates[3] = kf[3] * u[ia_ads] - kr[3] * u[ia] * θ_free\n\n            println(\n                \"rate constants: $(ForwardDiff.value.(kf)) and $(ForwardDiff.value.(kr))\",\n            )\n            println(\"rates: $(ForwardDiff.value.(rates))\")\n            println(\"aplus: $(ForwardDiff.value(u[iaplus]))\")\n\n            # bulk species\n            f[iaplus] += -rates[1] * S\n            f[ia] += rates[3] * S\n\n            # surface species\n            f[iaplus_ads] += rates[1] - rates[2]\n            f[ia_ads] += rates[2] - rates[3]\n\n        end\n        nothing\n    end\n\n\n    celldata = ElectrolyteData(;\n        nc = 3,\n        na = 2,\n        z = [1, -1, 0],\n        D = [2.0e-9, 2.0e-9, 2.0e-9] * ufac\"m^2/s\", ## from Ringe paper\n        T = T,\n        eneutral = false,\n        κ = fill(κ, 3),\n        Γ_we = 1,\n        Γ_bulk = 2,\n        scheme,\n    )\n\n    (; iϕ::Int, ip::Int) = celldata\n\n    celldata.c_bulk[iaplus] = 0.1 * mol / dm^3\n    celldata.c_bulk[ibminus] = 0.1 * mol / dm^3\n    celldata.c_bulk[ia] = 0.1 * mol / dm^3\n\n    @assert isapprox(celldata.c_bulk' * celldata.z, 0, atol = 1.0e-10)\n\n    cell = PNPSystem(grid; bcondition = halfcellbc, celldata)\n\n    un = unknowns(cell)\n    @views un[iaplus_ads, :] .= 0.1\n    @views un[ia_ads, :] .= 0.1\n\n\n    result = ivsweep(cell; voltages, store_solutions=true, kwargs...)\n    tsol = voltages_solutions(result)\n    currs = currents(result, ia)\n    volts = result.voltages\n\n    vis = GridVisualizer(Plotter = Plotter, layout = (1, 1))\n\n    scalarplot!(\n        vis[1, 1],\n        volts,\n        currs * ufac\"cm^2/mA\",\n        color = :red,\n        markershape = :utriangle,\n        markersize = 7,\n        markevery = 10,\n        label = \"PNP\",\n        legend = :lt,\n        xlabel = \"Δϕ/V\",\n        ylabel = \"I/(mA/cm^2)\",\n    )\n    ##scalarplot!(vis[2,1], sigmas, energies, color=\"black\",clear=true,xlabel=\"σ/(μC/cm^s)\",ylabel=\"ΔE/eV\")\n    ##scalarplot!(vis[2,1], ϕs, rs, xlimits=(-1.5,-0.6), yscale=:log, xlabel=\"Δϕ/V\", ylabel=\"c(CO2)/M\")\n    for curr in currs\n        println(curr)\n    end\n    return reveal(vis)\nend\n\nend","category":"page"},{"location":"examples/Example111_SurfaceKinetics/","page":"Suface kinetics","title":"Suface kinetics","text":"","category":"page"},{"location":"examples/Example111_SurfaceKinetics/","page":"Suface kinetics","title":"Suface kinetics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"EditURL = \"https://github.com/j-fu/LiquidElectrolytes.jl/blob/main/examples/Example110_Fe23Cell.jl\"","category":"page"},{"location":"examples/Example110_Fe23Cell/#Fe-redox-half-cell","page":"Fe redox half cell","title":"Fe redox half cell","text":"","category":"section"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"(source code)","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"I-V sweep for Fe^2+ to Fe^2+ + e^-","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"Methods called:","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"ElectrolyteData\nivsweep\ndlcapsweep\nPNPSystem","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"module Example110_Fe23Cell\nusing LessUnitful\nusing ExtendableGrids, GridVisualize\nusing VoronoiFVM\nusing LiquidElectrolytes\nusing Colors\nusing StaticArrays\nusing InteractiveUtils\n\nfunction main(;\n    nref = 0,\n    compare = false,\n    eneutral::Bool = false,\n    voltages = (-1:0.025:1) * ufac\"V\",\n    dlcap = false,\n    R0 = 1.0e-10,\n    molarities = [0.001, 0.01, 0.1, 1],\n    scheme = :μex,\n    xmax = 1,\n    κ = 10.0,\n    Plotter = nothing,\n    new = false,\n    kwargs...,\n)\n\n    @local_phconstants N_A e R ε_0\n    F = N_A * e\n    @local_unitfactors cm μF mol dm s mA A nm\n\n\n\n    defaults = (;\n        max_round = 3,\n        tol_round = 1.0e-9,\n        verbose = \"e\",\n        reltol = 1.0e-8,\n        tol_mono = 1.0e-10,\n    )\n\n    kwargs = merge(defaults, kwargs)\n\n    hmin = 1.0e-1 * nm * 2.0^(-nref)\n    hmax = 1.0 * nm * 2.0^(-nref)\n    L = 20.0 * nm\n    X = geomspace(0, L, hmin, hmax)\n    grid = simplexgrid(X)\n\n\n    R0 = R0 * ufac\"mol/(cm^2*s)\"\n    Δg = 0.0\n    β = 0.5\n    ihplus = 1\n    ife2 = 2\n    ife3 = 3\n    iso4 = 4\n\n    function halfcellbc(f, u, bnode, data)\n        (; nc, Γ_we, Γ_bulk, ϕ_we, ip, iϕ, v, v0, RT) = data\n        bulkbcondition(f, u, bnode, data; region = Γ_bulk)\n        if bnode.region == Γ_we\n            if !data.eneutral\n                boundary_dirichlet!(f, u, bnode; species = iϕ, region = Γ_we, value = ϕ_we)\n            end\n            c0, barc = c0_barc(u, data)\n            μfe2 = chemical_potential(u[ife2], barc, u[ip], v[ife2] + κ * v0, data)\n            μfe3 = chemical_potential(u[ife3], barc, u[ip], v[ife2] + κ * v0, data)\n            A = (μfe2 - μfe3 + Δg - data.eneutral * F * (u[iϕ] - ϕ_we)) / RT\n            r = rrate(R0, β, A)\n            f[ife2] -= r\n            f[ife3] += r\n        end\n        nothing\n    end\n\n\n    celldata = ElectrolyteData(;\n        nc = 4,\n        z = [1, 2, 3, -2],\n        eneutral,\n        κ = fill(κ, 4),\n        Γ_we = 1,\n        Γ_bulk = 2,\n        scheme,\n    )\n\n    (; iϕ::Int, ip::Int) = celldata\n\n    celldata.c_bulk[ihplus] = 1.0 * mol / dm^3\n    celldata.c_bulk[ife2] = 0.1 * mol / dm^3\n    celldata.c_bulk[ife3] = 0.1 * mol / dm^3\n    celldata.c_bulk[iso4] = 0.75 * mol / dm^3\n\n    @assert isapprox(celldata.c_bulk' * celldata.z, 0, atol = 1.0e-12)\n\n    cell = PNPSystem(grid; bcondition = halfcellbc, celldata)\n\n    # Compare electroneutral and double layer cases\n    if compare\n\n        celldata.eneutral = false\n        result = ivsweep(cell; voltages,store_solutions=true, kwargs...)\n        currs = LiquidElectrolytes.currents(result,ife2)\n\n        celldata.eneutral = true\n        nresult = ivsweep(cell; voltages,store_solutions=true, kwargs...)\n        ncurrs = LiquidElectrolytes.currents(nresult,ife2)\n\n        @show length(result.voltages), size(currs,1)\n        @show length(nresult.voltages), size(ncurrs,1)\n        vis = GridVisualizer(;\n            Plotter,\n            resolution = (600, 400),\n            clear = true,\n            legend = :lt,\n            xlabel = \"Δϕ/V\",\n            ylabel = \"I/(A/m^2)\",\n        )\n        scalarplot!(\n            vis,\n            result.voltages,\n            -currs,\n            color = \"red\",\n            markershape = :utriangle,\n            markersize = 7,\n            markevery = 10,\n            label = \"PNP\",\n        )\n        scalarplot!(\n            vis,\n            nresult.voltages,\n            -ncurrs,\n            clear = false,\n            color = :green,\n            markershape = :none,\n            label = \"NNP\",\n        )\n        return reveal(vis)\n    end\n\n\n    # Calculate double layer capacitances\n    if dlcap\n\n        vis = GridVisualizer(;\n            Plotter,\n            size = (500, 300),\n            legend = :rt,\n            clear = true,\n            xlabel = \"φ/V\",\n            ylabel = \"C_dl/(μF/cm^2)\",\n        )\n        hmol = 1 / length(molarities)\n        for imol = 1:length(molarities)\n            color = RGB(1 - imol / length(molarities), 0, imol / length(molarities))\n            result= dlcapsweep(cell; voltages, molarity = molarities[imol], kwargs...)\n            scalarplot!(\n                vis,\n                result.voltages,\n                result.cdl / (μF / cm^2);\n                color,\n                clear = false,\n                label = \"$(molarities[imol])M\",\n            )\n        end\n        return reveal(vis)\n    end\n\n    # Full calculation\n\n    result=ivsweep(cell; store_solutions=true, voltages, kwargs...)\n\n    currs = LiquidElectrolytes.currents(result,ife2)\n\n    sol=LiquidElectrolytes.voltages_solutions(result)\n\n    xmax = xmax * nm\n    xlimits = [0, xmax]\n    vis = GridVisualizer(; Plotter, resolution = (1200, 400), layout = (1, 5), clear = true)\n    aspect = 3.5 * xmax / (result.voltages[end] - result.voltages[begin])\n\n    scalarplot!(\n        vis[1, 1],\n        currs / (mA / cm^2),\n        result.voltages,\n        markershape = :none,\n        title = \"IV\",\n        xlabel = \"I\",\n        ylabel = \"ϕ\",\n    )\n    scalarplot!(\n        vis[1, 2],\n        cell,\n        sol;\n        species = ife2,\n        aspect,\n        scale = 1.0 / (mol / dm^3),\n        xlimits,\n        title = \"Fe2+\",\n        colormap = :summer,\n        ylabel = \"ϕ\",\n    )\n    scalarplot!(\n        vis[1, 3],\n        cell,\n        sol;\n        species = ife3,\n        aspect,\n        scale = 1.0 / (mol / dm^3),\n        xlimits,\n        title = \"Fe3+\",\n        colormap = :summer,\n        ylabel = \"ϕ\",\n    )\n    scalarplot!(\n        vis[1, 4],\n        cell,\n        sol;\n        species = iϕ,\n        aspect,\n        scale = 1.0 / (mol / dm^3),\n        xlimits,\n        title = \"ϕ\",\n        colormap = :bwr,\n        ylabel = \"ϕ\",\n    )\n    scalarplot!(\n        vis[1, 5],\n        cell,\n        sol;\n        species = ip,\n        aspect,\n        xlimits,\n        title = \"p\",\n        colormap = :summer,\n        ylabel = \"ϕ\",\n    )\n\n    reveal(vis)\nend\n\nend","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"using Example110_Fe23Cell,CairoMakie # hide\nCairoMakie.activate!(type=\"svg\",visible=false) # hide\nExample110_Fe23Cell.main(Plotter=CairoMakie)","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"using Example110_Fe23Cell,CairoMakie # hide\nCairoMakie.activate!(type=\"svg\",visible=false) # hide\nExample110_Fe23Cell.main(compare=true,Plotter=CairoMakie,voltages=-1:0.025:1)","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"using Example110_Fe23Cell,CairoMakie # hide\nCairoMakie.activate!(type=\"svg\",visible=false) # hide\nExample110_Fe23Cell.main(compare=true,Plotter=CairoMakie,voltages=-0.2:0.025:0.2)","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"","category":"page"},{"location":"examples/Example110_Fe23Cell/","page":"Fe redox half cell","title":"Fe redox half cell","text":"This page was generated using Literate.jl.","category":"page"},{"location":"internal/#Electrolyte-data","page":"Internal API","title":"Electrolyte data","text":"","category":"section"},{"location":"internal/","page":"Internal API","title":"Internal API","text":"LiquidElectrolytes.charge\nLiquidElectrolytes.vrel\nLiquidElectrolytes.rlog\nLiquidElectrolytes.rexp\nLiquidElectrolytes.wnorm","category":"page"},{"location":"internal/#LiquidElectrolytes.charge","page":"Internal API","title":"LiquidElectrolytes.charge","text":"charge(c,electrolyte)\n\nCalculate charge from vector of concentrations\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.vrel","page":"Internal API","title":"LiquidElectrolytes.vrel","text":"vrel(ic,electrolyte)\n\nCalculate relative (wrt. solvent) molar volume of i-th species v_irel=κ_i+fracv_iv_0.\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.rlog","page":"Internal API","title":"LiquidElectrolytes.rlog","text":"rlog(u, electrolyte)\n\nCalls rlog(u;eps=electrolyte.epsreg)\n\n\n\n\n\nrlog(u; eps=1.0e-20)\n\nRegularized logarithm. Smooth linear continuation for x<eps. This means we can calculate a \"logarithm\"  of a small negative number.\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.rexp","page":"Internal API","title":"LiquidElectrolytes.rexp","text":"rexp(x;trunc=500.0)\n\nRegularized exponential. Linear continuation for x>trunc,   returns 1/rexp(-x) for x<-trunc.\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.wnorm","page":"Internal API","title":"LiquidElectrolytes.wnorm","text":"wnorm(u,w,p)\n\nWeighted norm with respect to columns\n\n\n\n\n\n","category":"function"},{"location":"internal/#Poisson-Boltzmann","page":"Internal API","title":"Poisson-Boltzmann","text":"","category":"section"},{"location":"internal/","page":"Internal API","title":"Internal API","text":"LiquidElectrolytes.pbspacecharge\nLiquidElectrolytes.pbreaction\nLiquidElectrolytes.pbflux","category":"page"},{"location":"internal/#LiquidElectrolytes.pbspacecharge","page":"Internal API","title":"LiquidElectrolytes.pbspacecharge","text":"pbspacecharge(φ, p, electorlyte)\n\nSpace charge expression for Poisson-Boltzmann\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.pbreaction","page":"Internal API","title":"LiquidElectrolytes.pbreaction","text":"pbreaction(f, u, node, electrolyte)\n\nReaction expression for Poisson-Boltzmann\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.pbflux","page":"Internal API","title":"LiquidElectrolytes.pbflux","text":"pbflux(f, u, edge, electrolyte)\n\nFlux expression for Poisson-Boltzmann\n\n\n\n\n\n","category":"function"},{"location":"internal/#Poisson-Nernst-Planck","page":"Internal API","title":"Poisson-Nernst-Planck","text":"","category":"section"},{"location":"internal/","page":"Internal API","title":"Internal API","text":"LiquidElectrolytes.pnpstorage\nLiquidElectrolytes.pnpreaction\nLiquidElectrolytes.pnpflux\nLiquidElectrolytes.default_bcondition\nLiquidElectrolytes.sflux\nLiquidElectrolytes.aflux\nLiquidElectrolytes.cflux\nLiquidElectrolytes.dμex","category":"page"},{"location":"internal/#LiquidElectrolytes.pnpstorage","page":"Internal API","title":"LiquidElectrolytes.pnpstorage","text":"pnpstorage(f, u, node, electrolyte)\n\nFinite volume storage term\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.pnpreaction","page":"Internal API","title":"LiquidElectrolytes.pnpreaction","text":"pnpreaction(f, u, node, electrolyte)\n\nFinite volume reaction term\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.pnpflux","page":"Internal API","title":"LiquidElectrolytes.pnpflux","text":"pnpflux(f, u, edge, electrolyte)\n\nFinite volume flux. It calls either sflux, cflux or aflux.\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.default_bcondition","page":"Internal API","title":"LiquidElectrolytes.default_bcondition","text":"default_bcondition(f,u,bnode,electrolyte)\n\nDefault boundary condition amounts to nothing\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.sflux","page":"Internal API","title":"LiquidElectrolytes.sflux","text":"sflux(ic,dϕ,ck,cl,βk,βl,bar_ck,bar_cl,electrolyte)\n\nSedan flux,  see Gaudeul/Fuhrmann 2022\n\nAppearantly first described by Yu, Zhiping  and Dutton, Robert, SEDAN III, www-tcad.stanford.edu/tcad/programs/sedan3.html\n\nsee also the 198? Fortran code available via  https://web.archive.org/web/20210518233152/http://www-tcad.stanford.edu/tcad/programs/oldftpable.html\n\nVerification calculation is in the paper.\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.aflux","page":"Internal API","title":"LiquidElectrolytes.aflux","text":"aflux(ic,dϕ,ck,cl,βk,βl,bar_ck,bar_cl,electrolyte)\n\nFlux expression based on reciprocal activity coefficents, see Fuhrmann, CPC 2015\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.cflux","page":"Internal API","title":"LiquidElectrolytes.cflux","text":"cflux(ic,dϕ,ck,cl,βk,βl,bar_ck,bar_cl,electrolyte)\n\nFlux expression based on central differences, see Gaudeul/Fuhrmann 2022\n\n\n\n\n\n","category":"function"},{"location":"internal/#LiquidElectrolytes.dμex","page":"Internal API","title":"LiquidElectrolytes.dμex","text":" dμex(βk, βl, electrolyte)\n\nCalculate differences of excess chemical potentials from reciprocal activity coefficients\n\n\n\n\n\n","category":"function"},{"location":"internal/#Electrochemical-calculations","page":"Internal API","title":"Electrochemical calculations","text":"","category":"section"},{"location":"internal/","page":"Internal API","title":"Internal API","text":"LiquidElectrolytes.splitz","category":"page"},{"location":"internal/#LiquidElectrolytes.splitz","page":"Internal API","title":"LiquidElectrolytes.splitz","text":"splitz(range::AbstractRange)\n\nIf range contains zero, split it into two parts, one with values <=0 and one with values >=0. Otherwise, return the range or its reverse, such that first value always is the one with the smallest absolute value.\n\n\n\n\n\nsplitz(range::Vector)\n\nVersion of splitz(range::AbstractRange) for vectors.\n\n\n\n\n\n","category":"function"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"EditURL = \"https://github.com/j-fu/LiquidElectrolytes.jl/blob/main/examples/Example101_DLCap.jl\"","category":"page"},{"location":"examples/Example101_DLCap/#Double-Layer-Capacitance","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"","category":"section"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"(source code)","category":"page"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"Calculation of double layer capacitance of a symmetric 1:1 electrolyte.","category":"page"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"Methods called:","category":"page"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"ElectrolyteData\ndlcapsweep\nPNPSystem","category":"page"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"module Example101_DLCap\nusing LessUnitful\nusing VoronoiFVM,ExtendableGrids,GridVisualize\nusing LiquidElectrolytes\nusing Colors\n\n\nfunction main(;voltages=-2:0.01:2,           ## Voltages/V\n              molarities=[0.001,0.01,0.1,1], ## Molarities/M\n\t      nref=0,\t                     ## Refinement level\n\t      scheme=:μex,\t             ## Flux calculation scheme\n\t      κ=10.0,                        ## Solvation number\n              Plotter=nothing,               ## Plotter\n\t      kwargs...                      ## Solver kwargs\n              )\n\n    # Obtain unit factors from LessUnitful.jl\n    @local_unitfactors nm cm μF V M m\n\n\n    # Create a standard 1D grid with grid spacing following geometric progression\n    hmin=1.0e-1*nm*2.0^(-nref)\n    hmax=1.0*nm*2.0^(-nref)\n    L=20.0*nm\n    X=geomspace(0,L,hmin,hmax)\n    grid=simplexgrid(X)\n\n    # Define boundary conditions\n    function bcondition(f,u,bnode,data)\n\t(;iϕ,Γ_we,Γ_bulk,ϕ_we) = data\n\n\t# Dirichlet ϕ=ϕ_we at Γ_we\n\tboundary_dirichlet!(f,u,bnode,species=iϕ,region=Γ_we,value=ϕ_we)\n\n        # Bulk condition at Γ_bulk\n        bulkbcondition(f,u,bnode,data,region=Γ_bulk)\n    end\n\n    # Create electrolyte data\n    celldata=ElectrolyteData(nc=2,\n                             Γ_we=1,\n\t\t\t     Γ_bulk=2;\n\t\t\t     scheme,\n                             κ=fill(κ,2),\n                             c_bulk=fill(0.01M,2))\n\n    # Create Poisson-Nernst-Planck system\n    cell=PNPSystem(grid;bcondition,celldata)\n\n    # Visualization\n    vis=GridVisualizer(;resolution=(500,300),\n                       legend=:rt,\n                       clear=true,\n                       xlabel=\"φ/V\",\n                       ylabel=\"C_dl/(μF/cm^2)\",\n                       Plotter)\n\n    for imol=1:length(molarities)\n\n\tcolor=RGB(1-imol/length(molarities),0,imol/length(molarities))\n\n\n\tresult=dlcapsweep(cell;\n                          δ=1.0e-6,\n                          voltages=collect(voltages)*V,\n                          molarity=molarities[imol]*M,\n                          kwargs...)\n\n\tcdl0=dlcap0(celldata)\n\n\tscalarplot!(vis,result.voltages/V,result.dlcaps/(μF/cm^2);\n                    color,\n                    clear=false,\n                    label=\"$(molarities[imol])M\",\n                    markershape=:none)\n\n\tscalarplot!(vis,[0],[cdl0]/(μF/cm^2);\n                    clear=false,\n                    markershape=:circle,\n                    label=\"\")\n    end\n    reveal(vis)\nend\n\nend","category":"page"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"using Example101_DLCap, CairoMakie # hide\nCairoMakie.activate!(type=\"svg\",visible=false) # hide\nExample101_DLCap.main(Plotter=CairoMakie)","category":"page"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"","category":"page"},{"location":"examples/Example101_DLCap/","page":"Double Layer Capacitance","title":"Double Layer Capacitance","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"EditURL = \"https://github.com/j-fu/LiquidElectrolytes.jl/blob/main/examples/Example120_ORRCell.jl\"","category":"page"},{"location":"examples/Example120_ORRCell/#ORR-Half-cell","page":"ORR Half cell","title":"ORR Half cell","text":"","category":"section"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"(source code)","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"I-V sweep for Oxygen Reduction","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"Methods called:","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"ElectrolyteData\nivsweep\ndlcapsweep\nPNPSystem","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"module Example120_ORRCell\nusing ExtendableGrids, GridVisualize\nusing VoronoiFVM\nusing LiquidElectrolytes\nusing Colors\nusing StaticArrays\nusing LessUnitful\n\n\nfunction main(;\n              voltages = -1:0.1:1,\n              compare = false,\n              molarity = 0.1,\n              nref = 0,\n              κ = 10.0,\n              vfac = 1.0,\n              eneutral = false,\n              scheme = :μex,\n              Plotter = nothing,\n              R0::Float64 = 4.0e-15,\n              epsreg = 1.0e-20,\n              kwargs...,\n              )\n\n    @local_phconstants R N_A e\n    @local_unitfactors nm cm μF mol dm s\n    F = N_A * e\n\n\n    defaults = (;\n        max_round = 3,\n        tol_round = 1.0e-10,\n        reltol = 1.0e-7,\n        tol_mono = 1.0e-7,\n        verbose = \"e\",\n    )\n    kwargs = merge(defaults, kwargs)\n\n    hmin = 1.0e-1 * nm * 2.0^(-nref)\n    hmax = 1.0 * nm * 2.0^(-nref)\n    L = 20.0 * nm\n    X = geomspace(0, L, hmin, hmax)\n    grid = simplexgrid(X)\n\n\n    R0 = R0 * mol / (cm^2 * s)\n    Δg = 0.0\n    β = 0.5\n    ϕ_we = 0.0\n    ihplus = 1\n    iso4 = 2\n    io2 = 3\n    z = [1, -2, 0]\n    κ = [κ, κ, 0]\n\n\n    function halfcellbc(f, u, bnode, data)\n        bulkbcondition(f, u, bnode, data)\n        (; iϕ, eneutral, ϕ_we, Γ_we, RT) = data\n\n        if bnode.region == Γ_we\n            f .= 0.0\n            if !data.eneutral\n                boundary_dirichlet!(\n                    f,\n                    u,\n                    bnode;\n                    species = iϕ,\n                    region = data.Γ_we,\n                    value = data.ϕ_we,\n                )\n            end\n            μh2o, μ = chemical_potentials!(MVector{4,eltype(u)}(undef), u, data)\n            A =\n                (4 * μ[ihplus] + μ[io2] - 2μh2o + Δg + 4*eneutral * F * (u[iϕ] - data.ϕ_we)) /\n                (RT)\n\n            r = rrate(R0, β, A)\n            f[ihplus] -= 4 * r\n            f[io2] -= r\n        end\n    end\n\n\n\n\n    celldata =\n        ElectrolyteData(; nc = 3, z, κ, Γ_we = 1, Γ_bulk = 2, eneutral, scheme, epsreg)\n\n    celldata.v*=vfac\n\n    (; iϕ, c_bulk) = celldata\n\n\n    c_bulk[io2] = 0.001 * mol / dm^3\n    c_bulk[iso4] = molarity * mol / dm^3\n    c_bulk[ihplus] = 2.0 * molarity * mol / dm^3\n\n\n    @assert isapprox(celldata.c_bulk' * celldata.z, 0, atol = 1.0e-12)\n\n    cell = PNPSystem(grid; bcondition = halfcellbc, celldata)\n\n\n    # Compare electroneutral and double layer cases\n    if compare\n        celldata.eneutral = false\n        sol=ivsweep(cell; voltages, kwargs...)\n        currs=currents(sol,io2)\n        volts=sol.voltages\n\n        celldata.eneutral = true\n        nsol  = ivsweep(cell; voltages, kwargs...)\n        ncurrs=currents(nsol,io2)\n        nvolts=nsol.voltages\n\n        vis = GridVisualizer(;\n            Plotter,\n            resolution = (600, 400),\n            clear = true,\n            legend = :lt,\n            xlabel = \"Δϕ/V\",\n            ylabel = \"I/(A/m^2)\",\n        )\n        scalarplot!(\n            vis,\n            volts,\n            currs,\n            color = \"red\",\n            markershape = :utriangle,\n            markersize = 7,\n            markevery = 10,\n            label = \"PNP\",\n        )\n        scalarplot!(\n            vis,\n            nvolts,\n            ncurrs,\n            clear = false,\n            color = :green,\n            markershape = :none,\n            label = \"NNP\",\n        )\n        return reveal(vis)\n    end\n\n    # IVsweep\n    vis = GridVisualizer(;Plotter, resolution = (1000, 300), layout = (1, 4))\n\n    result = ivsweep(cell; voltages,store_solutions=true, kwargs...)\n    currs=LiquidElectrolytes.currents(result,io2)\n    sol=LiquidElectrolytes.voltages_solutions(result)\n    volts=result.voltages\n\n    xmax = 10 * nm\n    xlimits = [0, xmax]\n    aspect = 2 * xmax / (volts[end] - volts[begin])\n\n\n    scalarplot!(\n        vis[1, 1],\n        currs,\n        volts,\n        markershape = :none,\n        title = \"IV\",\n        xlabel = \"I\",\n        ylabel = \"V\",\n    )\n    scalarplot!(\n        vis[1, 2],\n        cell,\n        sol;\n        scale= 1.0/(mol/dm^3),\n        species = io2,\n        aspect,\n        xlimits,\n        title = \"O2\",\n        colormap = :summer,\n    )\n    scalarplot!(\n        vis[1, 3],\n        cell,\n        sol;\n        species = ihplus,\n        aspect,\n        scale= 1.0/(mol/dm^3),\n        xlimits,\n        title = \"H+\",\n        colormap = :summer,\n    )\n\n    scalarplot!(\n        vis[1, 4],\n        sol[io2, 1, :]*1000,\n        volts,\n        xlabel = \"c\",\n        label = \"1000 O2\",\n        color = :green,\n        clear = false,\n        legend = :rc,\n    )\n    scalarplot!(\n        vis[1, 4],\n        sol[ihplus, 1, :],\n        volts,\n        title = \"c(0)\",\n        xlabel = \"c\",\n        ylabel = \"V\",\n        label = \"H+\",\n        color = :red,\n        clear=false,\n    )\n    scalarplot!(\n        vis[1, 4],\n        sol[iso4, 1, :],\n        volts,\n        label = \"SO4--\",\n        color = :blue,\n        clear = false,\n        legend = :rc,\n    )\n\n    reveal(vis)\nend\n\nend","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"using Example120_ORRCell,CairoMakie #hide\nCairoMakie.activate!(type=\"svg\",visible=false) # hide\nExample120_ORRCell.main(Plotter=CairoMakie)","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"using Example120_ORRCell,CairoMakie #hide\nCairoMakie.activate!(type=\"svg\",visible=false) # hide\nExample120_ORRCell.main(compare=true,Plotter=CairoMakie)","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"","category":"page"},{"location":"examples/Example120_ORRCell/","page":"ORR Half cell","title":"ORR Half cell","text":"This page was generated using Literate.jl.","category":"page"}]
}
